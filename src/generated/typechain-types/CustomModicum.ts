/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CustomModicumInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "clearJobIds"
      | "currentJobs"
      | "getBalance"
      | "getCurrentJobs"
      | "getJobId"
      | "getParams"
      | "runModuleWithDefaultMediators"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "clearJobIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentJobs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentJobs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getJobId",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getParams",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "runModuleWithDefaultMediators",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "clearJobIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentJobs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentJobs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getJobId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "runModuleWithDefaultMediators",
    data: BytesLike
  ): Result;
}

export interface CustomModicum extends BaseContract {
  connect(runner?: ContractRunner | null): CustomModicum;
  waitForDeployment(): Promise<this>;

  interface: CustomModicumInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  clearJobIds: TypedContractMethod<[], [void], "nonpayable">;

  currentJobs: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  getCurrentJobs: TypedContractMethod<[], [bigint[]], "view">;

  getJobId: TypedContractMethod<
    [name: string, params: string, jobNo: BigNumberish],
    [bigint],
    "view"
  >;

  getParams: TypedContractMethod<[jobId: BigNumberish], [string], "view">;

  runModuleWithDefaultMediators: TypedContractMethod<
    [name: string, params: string],
    [bigint],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "clearJobIds"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currentJobs"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentJobs"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getJobId"
  ): TypedContractMethod<
    [name: string, params: string, jobNo: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getParams"
  ): TypedContractMethod<[jobId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "runModuleWithDefaultMediators"
  ): TypedContractMethod<[name: string, params: string], [bigint], "payable">;

  filters: {};
}
